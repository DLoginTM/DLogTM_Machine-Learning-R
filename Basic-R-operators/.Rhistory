# Installing required libraries
install.packages("tidyverse")
install.packages("dplyr")
install.packages("tidyr")
install.packages("ggplot2")
install.packages("gridExtra")
install.packages("readr")
install.packages("skimr")
install.packages("caret")
install.packages("e1071")
# Importing Libraries
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
# Data Importation:
library(readr)
# Summaries of Data:
library(skimr)
# Predictive Modeling/ML:
library(caret)
library(e1071)
food_survey <- read_csv("Food_survey.csv")
# Checking the provided sections
str(food_survey)
# Check for duplicate Participant_IDs:
sum(duplicated(food_survey$Participant_ID) == TRUE)
# Delete Participant_ID column and Timestamp columns; they are unneeded.
food_survey <- select(food_survey, -Timestamp)
food_survey <- select(food_survey, -Participant_ID)
head(food_survey)
skim(food_survey)
food_survey[!complete.cases(food_survey),]
food_survey <- na.omit(food_survey)
# See which Nationalities are represented:
as.matrix(unique(food_survey$Nationality))
# Nationality - Malaysian
food_survey$Nationality <- gsub("Malaysia", "Malaysian", food_survey$Nationality)
food_survey$Nationality <- gsub("MALAYSIAN", "Malaysian", food_survey$Nationality)
food_survey$Nationality <- gsub("Malaysiann", "Malaysian", food_survey$Nationality)
food_survey$Nationality <- gsub("MY", "Malaysian", food_survey$Nationality)
# Nationality - Indonesian
food_survey$Nationality <- gsub("Indonesain", "Indonesian", food_survey$Nationality)
food_survey$Nationality <- gsub("Indonesia", "Indonesian", food_survey$Nationality)
food_survey$Nationality <- gsub("Indonesiann", "Indonesian", food_survey$Nationality)
# Nationality - Pakistani
food_survey$Nationality <- gsub("Pakistan", "Pakistani", food_survey$Nationality)
food_survey$Nationality <- gsub("Pakistanii", "Pakistani", food_survey$Nationality)
as.matrix(unique(food_survey$Nationality))
food_survey %>% count(Nationality, sort = TRUE)
## Let's graph the totals for the other categorical variables:
food_survey %>% count(Food, sort = TRUE) -> Food_count
Food_count %>% ggplot(aes(x = Food, y = n)) + geom_bar(stat = "identity") + geom_bar(stat = "identity", color = "#E69F00", fill = "#E69F00") + geom_text(aes(label=n), color="white", fontface = "bold", vjust = 1.5, size=5) -> Food_count_g
food_survey %>% count(Juice, sort = TRUE) -> Juice_count
Juice_count %>% ggplot(aes(x = Juice, y = n)) + geom_bar(stat = "identity") + geom_bar(stat = "identity", color = "#56B4E9", fill = "#56B4E9") + geom_text(aes(label=n), color="white", fontface = "bold", vjust = 1.5, size=5) -> Juice_count_g
food_survey %>% count(Dessert, sort = TRUE) -> Dessert_count
Dessert_count %>% ggplot(aes(x = Dessert, y = n)) + geom_bar(stat = "identity") + geom_bar(stat = "identity", color = "#FF6433", fill = "#FF6433") + geom_text(aes(label=n), color="white", fontface = "bold", vjust = 1.5, size=5) -> Dessert_count_g
food_survey %>% count(Gender, sort = TRUE) -> Gender_count
Gender_count %>% ggplot(aes(x = Gender, y = n)) + geom_bar(stat = "identity", color = "#2BD64D", fill = "#2BD64D") + geom_text(aes(label=n), color="white", fontface = "bold", vjust = 1.5, size=5) -> Gender_count_g
grid.arrange(Food_count_g, Juice_count_g, Dessert_count_g, Gender_count_g)
summary1 <- food_survey %>%
count(Food, Juice, Dessert, sort = TRUE)
ggplot(summary1, aes(Juice, n, fill = Dessert)) +
geom_bar(position = "fill" , stat = "identity", color = "black") +
facet_wrap(facets = vars(Food)) +
scale_fill_brewer(palette = "Accent") +
theme_bw() + scale_y_continuous(labels = scales::percent) +
ggtitle("Relative Popularity of Dessert per Food and Juice Preference") +
labs(y = NULL)
#Try this if u need to add new colors
#scale_fill_manual(values = c("#56B4E9", "#736F6E", "#FF6433", "#2BD64D"))
#https://htmlcolorcodes.com/  --> to find manual good colors
# http://rstudio-pubs-static.s3.amazonaws.com/5312_98fc1aba2d5740dd849a5ab797cc2c8d.html ---> Check for coloring
food_survey.head()
food_survey
res = cor(food_survey) # -1 here means we look at all columns except the first column
foodpref_m <- food_survey
# Consolidate non-Indian nationalities into one class:
foodpref_m$Nationality[grep(pattern = "Indian", invert = TRUE, x = foodpref$Nationality)] <- "Non_Indian"
foodpref_m <- food_survey
foodpref_m <- food_survey
# Consolidate non-Indian nationalities into one class:
foodpref_m$Nationality[grep(pattern = "Indian", invert = TRUE, x = food_survey$Nationality)] <- "Non_Indian"
# Confirm the change:
foodpref_m %>% count(Nationality, sort = TRUE)
# Convert all the categorical variables to factors:
foodpref_m$Gender <- as.factor(foodpref_m$Gender)
foodpref_m$Nationality <- as.factor(foodpref_m$Nationality)
foodpref_m$Dessert <- as.factor(foodpref_m$Dessert)
# $Food and $Juice entries require special handling:
foodpref_m$Food <- make.names(foodpref_m$Food, unique = FALSE)
foodpref_m$Food <- as.factor(foodpref_m$Food)
foodpref_m$Juice <- make.names(foodpref_m$Juice, unique = FALSE)
foodpref_m$Juice <- as.factor(foodpref_m$Juice)
foodpref_m
foodpref_m
res = cor(foodpref_m[,-1]) # -1 here means we look at all columns except the first column
ggplot(data = foodpref_m, aes(x=Gender,y=Age, color=Food)) +
geom_boxplot()+
scale_color_brewer(palette="Dark2") +
geom_jitter(shape=16, position=position_jitter(0.2))+
labs(title = 'Food Preference ',
y='Food',x='Gender')
foodpref_m <- food_survey
# Consolidate non-Indian nationalities into one class:
foodpref_m$Nationality[grep(pattern = "Indian", invert = TRUE, x = food_survey$Nationality)] <- "Non_Indian"
# Confirm the change:
foodpref_m %>% count(Nationality, sort = TRUE)
# Convert all the categorical variables to factors:
foodpref_m$Gender <- factor(foodpref_m$Gender)
foodpref_m$Nationality <- factor(foodpref_m$Nationality)
foodpref_m$Dessert <- factor(foodpref_m$Dessert)
# $Food and $Juice entries require special handling:
foodpref_m$Food <- make.names(foodpref_m$Food, unique = FALSE)
foodpref_m$Food <- factor(foodpref_m$Food)
foodpref_m$Juice <- make.names(foodpref_m$Juice, unique = FALSE)
foodpref_m$Juice <- factor(foodpref_m$Juice)
foodpref_m
# load libraries
library(tidyverse)
library(naniar)
library(skimr)
library(caret)
library(MLmetrics)
library(imbalance)
library(gridExtra)
library(patchwork)
# set a seed for reproducible results
set.seed(88)
# custom plot size function
fig <- function(width, heigth){
options(repr.plot.width = width, repr.plot.height = heigth)
}
## ggplot custom theme
theme_bigfont <- theme(plot.title = element_text(size=12),
axis.text.x= element_text(size=9),
axis.text.y= element_text(size=9),
axis.title=element_text(size=14),
legend.text = element_text(size = 12))
# read data into R
stroke_data <- read_csv("C:/Users/krithika/Desktop/healthcare-dataset-stroke-data.csv")
# read data into R
stroke_data <- read_csv("C:\Users\krithika\Desktop\R-tutorial\Cleaning and EDA")
# read data into R
stroke_data <- read_csv("C:\\Users\\krithika\\Desktop\\R-tutorial\\Cleaning and EDA\\healthcare-dataset-stroke-data.csv")
# summary of the data
summary(stroke_data)
# Data Cleaning and Handling Missing Values
# check unique values
cat("Gender:")
unique(stroke_data$gender)
cat("Married:")
unique(stroke_data$ever_married)
cat("Work type:")
unique(stroke_data$work_type)
cat("Residence type:")
unique(stroke_data$Residence_type)
cat("Smoking:")
unique(stroke_data$smoking_status)
# check NA values in the dataset
miss_scan_count(data = stroke_data, search = list("N/A", "Unknown"))
# Fill wrong smoking_status values and bmi values with NA
# replace the "N/A" in bmi
stroke_data_clean <- replace_with_na(data = stroke_data, replace = list(bmi = c("N/A"), smoking_status = c("Unknown"))) %>%
# change bmi to numeric
mutate(bmi = as.numeric(bmi))
# check
unique(stroke_data_clean$smoking_status)
stroke_data_clean$hypertension = as.factor(stroke_data_clean$hypertension)
stroke_data_clean$heart_disease = as.factor(stroke_data_clean$heart_disease)
mean_bmi = mean(stroke_data_clean$bmi,na.rm = T)
stroke_data_imp = stroke_data_clean %>%
mutate(bmi = ifelse(is.na(bmi),mean_bmi,bmi))
stroke_data_imp <- stroke_data_imp %>%
mutate(bmi = case_when(bmi < 18.5 ~ "underweight",
bmi >= 18.5 & bmi < 25 ~ "normal weight",
bmi >= 25 & bmi < 30 ~ "overweight",
bmi >= 30 ~ "obese"),
bmi = factor(bmi, levels = c("underweight", "normal weight", "overweight", "obese"), order = TRUE))
head(stroke_data_imp)
# mode imputation for smoking_status and use as.factor to binary code the categorical variable
stroke_data_imp2 <- stroke_data_imp %>%
fill(smoking_status) %>%
mutate(across(c(hypertension, heart_disease), factor),
across(where(is.character), as.factor),
across(where(is.factor), as.numeric),
stroke = factor(ifelse(stroke == 0, "no", "yes")))
head(stroke_data_imp2)
foodpref_m <- food_survey
foodpref_m <- food_survey %>%
group_by(Gender, Dessert) %>%
summarise(Median_Age = median(Age)) %>%
rename(Pref = Dessert) %>%
filter(Pref == c("Yes", "No")) %>%
mutate_if(is.character, stringr::str_replace_all, pattern = 'Yes', replacement = 'Dessert: Yes') %>%
mutate_if(is.character, stringr::str_replace_all, pattern = 'No', replacement = 'Dessert: No')
# Consolidate non-Indian nationalities into one class:
foodpref_m$Nationality[grep(pattern = "Indian", invert = TRUE, x = food_survey$Nationality)] <- "Non_Indian"
foodpref_m <- food_survey
foodpref_m <- food_survey %>%
group_by(Gender, Dessert) %>%
summarise(Median_Age = median(Age)) %>%
rename(Pref = Dessert) %>%
filter(Pref == c("Yes", "No")) %>%
mutate_if(is.character, stringr::str_replace_all, pattern = 'Yes', replacement = 'Dessert: Yes') %>%
mutate_if(is.character, stringr::str_replace_all, pattern = 'No', replacement = 'Dessert: No')
# Convert all the categorical variables to factors:
foodpref_m$Gender <- factor(foodpref_m$Gender)
foodpref_m$Nationality <- factor(foodpref_m$Nationality)
foodpref_m <- food_survey
foodpref_m <- food_survey %>%
group_by(Gender, Dessert) %>%
summarise(Median_Age = median(Age)) %>%
rename(Pref = Dessert) %>%
filter(Pref == c("Yes", "No")) %>%
mutate_if(is.character, stringr::str_replace_all, pattern = 'Yes', replacement = 'Dessert: Yes') %>%
mutate_if(is.character, stringr::str_replace_all, pattern = 'No', replacement = 'Dessert: No')
# $Food and $Juice entries require special handling:
foodpref_m$Food <- make.names(foodpref_m$Food, unique = FALSE)
foodpref_m <- food_survey
foodpref_m <- food_survey %>%
group_by(Gender, Dessert) %>%
summarise(Median_Age = median(Age)) %>%
rename(Pref = Dessert) %>%
filter(Pref == c("Yes", "No")) %>%
mutate_if(is.character, stringr::str_replace_all, pattern = 'Yes', replacement = 'Dessert: Yes') %>%
mutate_if(is.character, stringr::str_replace_all, pattern = 'No', replacement = 'Dessert: No')
foodpref_m <- foodpref_m %>%
mutate(across(c(Age), factor),
across(where(is.character), as.factor),
across(where(is.factor), as.numeric),
Dessert = factor(ifelse(Dessert == 0, "no", "yes")))
foodpref_m
food_survey
foodsur_m <- food_survey
foodsur_m <- food_survey %>%
rename(Pref = Dessert) %>%
filter(Pref == c("Yes", "No")) %>%
mutate_if(is.character, stringr::str_replace_all, pattern = 'Yes', replacement = 'Dessert: Yes') %>%
mutate_if(is.character, stringr::str_replace_all, pattern = 'No', replacement = 'Dessert: No')
foodsur_m
foodsur_m <- food_survey
foodsur_m <- food_survey %>%
rename(Pref = Dessert) %>%
filter(Pref == c("Yes", "No")) %>%
mutate_if(is.character, stringr::str_replace_all, pattern = 'Yes', replacement = 1) %>%
mutate_if(is.character, stringr::str_replace_all, pattern = 'No', replacement = 0)
foodsur_m <- food_survey
foodsur_m <- food_survey %>%
rename(Pref = Dessert) %>%
filter(Pref == c("Yes", "No")) %>%
mutate_if(is.character, stringr::str_replace_all, pattern = 'Yes', replacement = 'Dessert: Yes') %>%
mutate_if(is.character, stringr::str_replace_all, pattern = 'No', replacement = 'Dessert: No')
foodsur_m
foodsur_m <- food_survey
foodsur_m <- food_survey %>%
filter(Dessert == c("Yes", "No")) %>%
mutate_if(is.character, stringr::str_replace_all, pattern = 'Yes', replacement = 'Yes') %>%
mutate_if(is.character, stringr::str_replace_all, pattern = 'No', replacement = 'No')
foodsur_m
# Convert all the categorical variables to factors:
foodsur_m$Gender <- as.factor(foodsur_m$Gender)
foodsur_m$Nationality <- as.factor(foodsur_m$Nationality)
foodsur_m$Dessert <- as.factor(foodpref_m$Dessert)
# Convert all the categorical variables to factors:
foodsur_m$Gender <- as.factor(foodsur_m$Gender)
foodsur_m$Nationality <- as.factor(foodsur_m$Nationality)
# $Food and $Juice entries require special handling:
foodsur_m$Food <- make.names(foodsur_m$Food, unique = FALSE)
foodpref_m$Food <- as.factor(foodsur_m$Food)
foodsur_m <- foodsur_m %>%
mutate(across(where(is.character), as.factor),
across(where(is.factor), as.numeric),
Dessert = factor(ifelse(Dessert == 0, "No", "Yes")))
head(foodsur_m)
res = cor(foodsur_m) # -1 here means we look at all columns except the first column
res = cor(foodsur_m[,c(1,2,3,4,5)])
res
res = cor(foodsur_m[,c(1,2,3,5)])
res
install.packages("Hmisc")
library("Hmisc")
res2 <- rcorr(foodsur_m[,c(1,2,3,5)])
install.packages("corrplot")
library(corrplot)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
ggplot(comics,aes(x=Food,fill=gender)) + geom_bar(position="dodge")
ggplot(comics,aes(x=Age,fill=gender)) + geom_bar(position="dodge")
ggplot(foodsur_m,aes(x=Food,fill=Gender)) + geom_bar(position="dodge")
ggplot(food_survey,aes(x=Gender,fill=Food)) + geom_bar(position="dodge") +
theme(axis.text.x = element_text(angle=90))
# Histogram combines the dots, and the y axis now shows the actual count
ggplot(foodsur_m,aes(x=Age)) + geom_histogram()
food_surheatmap <- ggplot(data = foodsur_m, mapping = aes(x = Dessert,
y = Gender,
fill = Age)) +
geom_tile() +
xlab(label = "Sample")
food_surheatmap
food_surheatmap <- ggplot(data = foodsur_m, mapping = aes(x = Food,
y = Gender,
fill = Age)) +
geom_tile() +
xlab(label = "Food Preferance based on Gender and Median Age")
food_surheatmap
food_surheatmap <- ggplot(data = foodsur_m, mapping = aes(x = [Dessert, Juice],
food_surheatmap <- ggplot(data = foodsur_m, mapping = aes(x = Juice,
y = Gender,
fill = Age)) +
geom_tile() +
xlab(label = "Food Preferance based on Gender and Median Age")
food_surheatmap
food_surheatmap <- ggplot(data = food_survey, mapping = aes(x = Juice,
y = Gender,
fill = Age)) +
geom_tile() +
xlab(label = "Food Preferance based on Gender and Median Age")
food_surheatmap
food_surheatmap <- ggplot(data = food_survey, mapping = aes(x = Juice,
y = Gender,
fill = Age)) +
geom_tile() +
xlab(label = "Juice Preferance based on Gender and Median Age")
food_surheatmap <- ggplot(data = food_survey, mapping = aes(x = Dessert,
y = Gender,
fill = Age)) +
geom_tile() +
xlab(label = "Dessert Preferance based on Gender and Median Age")
food_surheatmap <- ggplot(data = food_survey, mapping = aes(x = Juice,
y = Gender,
fill = Age)) +
food_surheatmap
food_surheatmap1 <- ggplot(data = food_survey, mapping = aes(x = Juice,
y = Gender,
fill = Age)) +
geom_tile() +
xlab(label = "Juice Preferance based on Gender and Median Age")
food_surheatmap2 <- ggplot(data = food_survey, mapping = aes(x = Dessert,
y = Gender,
fill = Age)) +
geom_tile() +
xlab(label = "Dessert Preferance based on Gender and Median Age")
food_surheatmap1
food_surheatmap2
food_surheatmap2
pie <- food_survey + coord_polar("Nationality", start=0)
# Barplot
bp<- ggplot(food_survey, aes(x="Nationality", y=Food, fill=group))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("Nationality", start=0)
# Barplot
bp<- ggplot(food_survey, aes(x="Nationality", y="Food", fill=group))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("Nationality", start=0)
# Barplot
bp<- ggplot(food_survey, aes(x=Nationality, y=Age, fill=Food))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("Nationality", start=0)
# Barplot
bp<- ggplot(food_survey, aes(x=Nationality, y=Age, fill=Food))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
pie
pie + scale_fill_brewer(palette="Blues")+
theme_minimal()
# Barplot
bp<- ggplot(food_survey, aes(x=Nationality, y=Age, fill=Food))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
pie + scale_fill_brewer(palette="Blues")+
theme_minimal()
# Barplot
bp<- ggplot(food_survey, aes(x="", y=Gender, fill=Age))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
pie + scale_fill_brewer(palette="Blues")+
theme_minimal()
# Barplot
bp<- ggplot(food_survey, aes(x="", y=Gender, fill=Nationality))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
pie + scale_fill_brewer(palette="Blues")+
theme_minimal()
